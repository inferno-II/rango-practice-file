Tango with Django: Rango project

8) Chapter 8: Working with Templates
   - Instead of hardcoding the url patterns into templates, use either of the following options:
      $ use name of url mapping
      $ reference the view directly by navigating from app to view to class
   - create a base.html file in templates/rango which is the skeleton html others inherit
   - edit category.html im templates/rango to inherit from base.html and remove any repeating code
   - edit the following html pages in templates/rango to inherit from base.html and use url template tag
      $ index.html
      $ category.html
      $ add_page.html
      $ add_category.html
      $ about.html
   - create a custom templete to retrive and return category list
      $ create a directory called templatetags in rango/ and create the following files within into
         * __init__.py     (leave empty)
         * rango_template_tags.py and create a template tag
      $ also create and edit cats.html in templates/ which uses the above created template tag
   - edit base.html to load and use the created template_tag

9) Chapter 9: User Authentication
   - install Bcrypt for more secure password hashing
      $ pip install bcrypt
   - edit seetings. py in tango_with_django/ to:
      $ add list of PASSWORD_HASHERS
      $ enter an option for minimum length of password in AUTH_PASSWORD_VALIDATORS list
   - add a new model called UserProfile in models.py in rango/
   - install PIL (Python Imaging Library) by installing pillow
      $ pip install pillow
   - register the UserProfile model to rango app admin interface by:
      $ editting admin.py in rango/
      $ making migrations and migrating the database
         * python manage.py makemigrations rango
         * python manage.py migrate
   - edit forms.py in rango/ to include forms for User and UserProfile
   - add a user registration functionality to rango
      $ edit views.py in rango/ to add a new view called register
      $ create and edit register.html in templates/rango to add template for registration
      $ edit urls.py in rango/ to add a new mapping to register view
   - add a user login functionality to rango
      $ create a login view by editting views.py in rango/
      $ create a login template by creating & editting a login.html in templates/rango
      $ add url mapping to login view by editting urls.py in rango/
      $ add a link to login url in base template by editting base.html in templates/rango
      $ edit index.html in templates/rango to add personalized welcome message when user logs in
   - create a restricted view which requires to be viewed by logged in users only
      $ add the login_required decorator to restricted view in views.py in templates/rango 
      $ edit urls.py in rango/ to create url mapping for restricted view
      $ edit settings.py to set a page to redirect to users not logged in
   - add a logout functionality to rango
      $ edit views.py in rango/ to add logout view with login_required decorator
      $ create url mapping for logout view by editting urls.py in rango/
      $ edit base.html in templates/rango to include logout link and display links based on user Authentication state
   - edit views.py in /rango so that only logged in users can add category or page (use login decorator)
   - add a informative error message on login if user credential is incorrect
      $ edit views.py to send a variable if incorrect credential is recieved
      $ edit login.html in templates/rango to display information if incorrect credential variable is recieved from login view
   - update restricted view in views.py to use restricted template that is created in templates/rango and the restricted.html inherits base.html template

10) Chapter 10 - Cookies & Sessions
   - edit views.py in rango/ to handle number of visits in Cookies
      $ create a cookie handler helper function to check for cookie in request, check last visit and send a cookie in respose
      $ use the helper function created above in index view
   - edit views.py to include the usage of sessions on the server side
      $ create a new server side cookie getter function to access cookie data on the server side
      $ update cookie handler function to use the server side cookie getter function
      $ update the index view accordingly
   - edit views.py to update about view to use cookie handler function and return user visit number
   - edit about.html to display the number of times a user has visited
  