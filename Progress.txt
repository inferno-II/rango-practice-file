Tango with Django: Rango project

8) Chapter 8: Working with Templates
   - Instead of hardcoding the url patterns into templates, use either of the following options:
      $ use name of url mapping
      $ reference the view directly by navigating from app to view to class
   - create a base.html file in templates/rango which is the skeleton html others inherit
   - edit category.html im templates/rango to inherit from base.html and remove any repeating code
   - edit the following html pages in templates/rango to inherit from base.html and use url template tag
      $ index.html
      $ category.html
      $ add_page.html
      $ add_category.html
      $ about.html
   - create a custom templete to retrive and return category list
      $ create a directory called templatetags in rango/ and create the following files within into
         * __init__.py     (leave empty)
         * rango_template_tags.py and create a template tag
      $ also create and edit cats.html in templates/ which uses the above created template tag
   - edit base.html to load and use the created template_tag


9) Chapter 9: User Authentication
   - install Bcrypt for more secure password hashing
      $ pip install bcrypt
   - edit seetings. py in tango_with_django/ to:
      $ add list of PASSWORD_HASHERS
      $ enter an option for minimum length of password in AUTH_PASSWORD_VALIDATORS list
   - add a new model called UserProfile in models.py in rango/
   - install PIL (Python Imaging Library) by installing pillow
      $ pip install pillow
   - register the UserProfile model to rango app admin interface by:
      $ editting admin.py in rango/
      $ making migrations and migrating the database
         * python manage.py makemigrations rango
         * python manage.py migrate
   - edit forms.py in rango/ to include forms for User and UserProfile
   - add a user registration functionality to rango
      $ edit views.py in rango/ to add a new view called register
      $ create and edit register.html in templates/rango to add template for registration
      $ edit urls.py in rango/ to add a new mapping to register view
   - add a user login functionality to rango
      $ create a login view by editting views.py in rango/
      $ create a login template by creating & editting a login.html in templates/rango
      $ add url mapping to login view by editting urls.py in rango/
      $ add a link to login url in base template by editting base.html in templates/rango
      $ edit index.html in templates/rango to add personalized welcome message when user logs in
   - create a restricted view which requires to be viewed by logged in users only
      $ add the login_required decorator to restricted view in views.py in templates/rango 
      $ edit urls.py in rango/ to create url mapping for restricted view
      $ edit settings.py to set a page to redirect to users not logged in
   - add a logout functionality to rango
      $ edit views.py in rango/ to add logout view with login_required decorator
      $ create url mapping for logout view by editting urls.py in rango/
      $ edit base.html in templates/rango to include logout link and display links based on user Authentication state
   - edit views.py in /rango so that only logged in users can add category or page (use login decorator)
   - add a informative error message on login if user credential is incorrect
      $ edit views.py to send a variable if incorrect credential is recieved
      $ edit login.html in templates/rango to display information if incorrect credential variable is recieved from login view
   - update restricted view in views.py to use restricted template that is created in templates/rango and the restricted.html inherits base.html template


10) Chapter 10 - Cookies & Sessions
   - edit views.py in rango/ to handle number of visits in Cookies
      $ create a cookie handler helper function to check for cookie in request, check last visit and send a cookie in respose
      $ use the helper function created above in index view
   - edit views.py to include the usage of sessions on the server side
      $ create a new server side cookie getter function to access cookie data on the server side
      $ update cookie handler function to use the server side cookie getter function
      $ update the index view accordingly
   - edit views.py to update about view to use cookie handler function and return user visit number
   - edit about.html to display the number of times a user has visited


11) Chapter 11 - User Authentication with Django-Registration-Redux
   - install django-registration-redux
      $ pip install -U django-registration-redux
   - add the above package (registration) to Installed_apps and set needed variables by editting settings.py (and ofcourse migrate)
   - edit urls.py in tango_with_django/ to include url mapping for registration package
   - create a registration directory in templates/ folder and create and edit the following files:
      $ login.html
      $ registration_form.html
      $ registration_complete.html
      $ logout.html
   - edit base.html in templates/rango to change urls to redux urls:
      $ change registration, login & logout to registration_redux urls
   - add a password change functionlity using registration_redux
      $ create and edit password_change_form.html in templates/registration
      $ create and edit password_change_done.html in templates/registration
      $ add password change link to base.html in templates/rango


12) Chapter 12 - Bootstrapping Rango
   - download & save bootstrap files to static folder (optional)
   - create & edit base_bootstrap.html in templates/rango and write bootstrap code
   - rename the previous base.html file to base_old.html and rename the base_bootstrap.html to base.html
   - edit the following files so they are refactored to bootstrap code
      $ index.html in templates/rango
      $ login.html in templates/registration
      $ add_page.html in templates/rango
      $ add_category in templates/rango
      $ registration_form.html in templates/registration
   - install Django-Bootstrap-Toolkit and add to Installed apps in settings.py
      $ pip install django-bootstrap-toolkit
   - edit add_category.html in templates/rango so as to refactor code to use bootstrap_toolkit


13) Chapter 13 - Google custom Search 
   - go to "https://console.developers.google.com/" and create a new project
   - then search for Custom Search API and enable it
   - then go to credentials and generate an API key
   - then go to "https://cse.google.com/" and create a new search engine
   - install google-api-python-client package which is used to interact with the google custom saerch api
      $ pip install google-api-python-client
   - create and edit google_custom_search.py file in rango/ directory
      $ the file retrives keys, makes request based on query and resturns result
   - create and edit search.html in templates/rango/
   - add a new search view by editting views.py in rango/ directory
   - edit urls.py in rango/ to app url mapping to search view
   - edit base.html in templates/rango to add the search url

14) Chapter 14 - Making Rango Tango - Excercises
   - add a track page clickthrough functionality
      $ add a view called track_url by editting views.py in rango/
         * this view gets the GET request with page id
         * increments the view field of the page and save the changes
         * redirect the user to the page url
      $ map the track_url view to url '/rango/goto/?page_id=1' by editting urls.py in rango/
   - add searching within a category page
      $ remove search link from menu bar by editting base.html in templates/rango
      $ edit category.html in templates/rango by adding the html code from search.html in the same directory
      $ update the search form action so that it refers to show category view url
      $ update the show category view to handle POST request from the search form by editting views.py in rango/
      $ edit category.html in templates/rango so that only logged in users can search
   - add a feature to allow users to create profile after registering
      $ create and edit profile_registration.html file in templates/rango/
      $ create a view called register_profile by editting views.py in rango/
      $ map the register_profile view to a url by editting urls.py in rango/
      $ edit urls.py in tango_with_django/ directory so as to redirect the success url in MyRegistrationView to the url mapping created above
   - add a feature to allow users to view and modify user info and profile
      $ create and edit profile.html in templates/rango that displays user profile and allows for edit of one's info
      $ add a new view called profile that handles displaying and updating profile by editting views.py in rango/
      $ add a url mapping for the profile view created above
      $ add a link in base.html in templates/rango to Profile view and thus template
   - add a feature to let users browse other user profiles
      $ create and edit list_profiles.html file in templates/rango to diaplay list of rango users
      $ create a new view called list_profiles to handle fetching of users list and sending to template
      $ add a url mapping for the list_profiles view mentioned above
      $ make sure only logged in users can view rango users profiles
      $ add a link in base.html navigation list to list_profile view and template