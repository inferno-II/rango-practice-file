Tango with Django: Rango project

8) Chapter 8: Working with Templates
   - Instead of hardcoding the url patterns into templates, use either of the following options:
      $ use name of url mapping
      $ reference the view directly by navigating from app to view to class
   - create a base.html file in templates/rango which is the skeleton html others inherit
   - edit category.html im templates/rango to inherit from base.html and remove any repeating code
   - edit the following html pages in templates/rango to inherit from base.html and use url template tag
      $ index.html
      $ category.html
      $ add_page.html
      $ add_category.html
      $ about.html
   - create a custom templete to retrive and return category list
      $ create a directory called templatetags in rango/ and create the following files within into
         * __init__.py     (leave empty)
         * rango_template_tags.py and create a template tag
      $ also create and edit cats.html in templates/ which uses the above created template tag
   - edit base.html to load and use the created template_tag


9) Chapter 9: User Authentication
   - install Bcrypt for more secure password hashing
      $ pip install bcrypt
   - edit seetings. py in tango_with_django/ to:
      $ add list of PASSWORD_HASHERS
      $ enter an option for minimum length of password in AUTH_PASSWORD_VALIDATORS list
   - add a new model called UserProfile in models.py in rango/
   - install PIL (Python Imaging Library) by installing pillow
      $ pip install pillow
   - register the UserProfile model to rango app admin interface by:
      $ editting admin.py in rango/
      $ making migrations and migrating the database
         * python manage.py makemigrations rango
         * python manage.py migrate
   - edit forms.py in rango/ to include forms for User and UserProfile
   - add a user registration functionality to rango
      $ edit views.py in rango/ to add a new view called register
      $ create and edit register.html in templates/rango to add template for registration
      $ edit urls.py in rango/ to add a new mapping to register view
   - add a user login functionality to rango
      $ create a login view by editting views.py in rango/
      $ create a login template by creating & editting a login.html in templates/rango
      $ add url mapping to login view by editting urls.py in rango/
      $ add a link to login url in base template by editting base.html in templates/rango
      $ edit index.html in templates/rango to add personalized welcome message when user logs in
   - create a restricted view which requires to be viewed by logged in users only
      $ add the login_required decorator to restricted view in views.py in templates/rango 
      $ edit urls.py in rango/ to create url mapping for restricted view
      $ edit settings.py to set a page to redirect to users not logged in
   - add a logout functionality to rango
      $ edit views.py in rango/ to add logout view with login_required decorator
      $ create url mapping for logout view by editting urls.py in rango/
      $ edit base.html in templates/rango to include logout link and display links based on user Authentication state
   - edit views.py in /rango so that only logged in users can add category or page (use login decorator)
   - add a informative error message on login if user credential is incorrect
      $ edit views.py to send a variable if incorrect credential is recieved
      $ edit login.html in templates/rango to display information if incorrect credential variable is recieved from login view
   - update restricted view in views.py to use restricted template that is created in templates/rango and the restricted.html inherits base.html template


10) Chapter 10 - Cookies & Sessions
   - edit views.py in rango/ to handle number of visits in Cookies
      $ create a cookie handler helper function to check for cookie in request, check last visit and send a cookie in respose
      $ use the helper function created above in index view
   - edit views.py to include the usage of sessions on the server side
      $ create a new server side cookie getter function to access cookie data on the server side
      $ update cookie handler function to use the server side cookie getter function
      $ update the index view accordingly
   - edit views.py to update about view to use cookie handler function and return user visit number
   - edit about.html to display the number of times a user has visited


11) Chapter 11 - User Authentication with Django-Registration-Redux
   - install django-registration-redux
      $ pip install -U django-registration-redux
   - add the above package (registration) to Installed_apps and set needed variables by editting settings.py (and ofcourse migrate)
   - edit urls.py in tango_with_django/ to include url mapping for registration package
   - create a registration directory in templates/ folder and create and edit the following files:
      $ login.html
      $ registration_form.html
      $ registration_complete.html
      $ logout.html
   - edit base.html in templates/rango to change urls to redux urls:
      $ change registration, login & logout to registration_redux urls
   - add a password change functionlity using registration_redux
      $ create and edit password_change_form.html in templates/registration
      $ create and edit password_change_done.html in templates/registration
      $ add password change link to base.html in templates/rango


12) Chapter 12 - Bootstrapping Rango
   - download & save bootstrap files to static folder (optional)
   - create & edit base_bootstrap.html in templates/rango and write bootstrap code
   - rename the previous base.html file to base_old.html and rename the base_bootstrap.html to base.html
   - edit the following files so they are refactored to bootstrap code
      $ index.html in templates/rango
      $ login.html in templates/registration
      $ add_page.html in templates/rango
      $ add_category in templates/rango
      $ registration_form.html in templates/registration
   - install Django-Bootstrap-Toolkit and add to Installed apps in settings.py
      $ pip install django-bootstrap-toolkit
   - edit add_category.html in templates/rango so as to refactor code to use bootstrap_toolkit


13) Chapter 13 - Google custom Search 
   - go to "https://console.developers.google.com/" and create a new project
   - then search for Custom Search API and enable it
   - then go to credentials and generate an API key
   - then go to "https://cse.google.com/" and create a new search engine
   - install google-api-python-client package which is used to interact with the google custom search api
      $ pip install google-api-python-client
   - create and edit google_custom_search.py file in rango/ directory
      $ the file retrives keys, makes request based on query and resturns result
      $ save your keys by creating a file for them and saving the files under keys/ directory
         * add "*.key" to your git ignore so that your keys don't get pushed to git repositories
   - create and edit search.html in templates/rango/
   - add a new search view by editting views.py in rango/ directory
   - edit urls.py in rango/ to app url mapping to search view
   - edit base.html in templates/rango to add the search url

14 & 15) Chapter 14 & 15 - Making Rango Tango - Excercises & Hints
   - add a track page clickthrough functionality
      $ add a view called track_url by editting views.py in rango/
         * this view gets the GET request with page id
         * increments the view field of the page and save the changes
         * redirect the user to the page url
      $ map the track_url view to url '/rango/goto/?page_id=1' by editting urls.py in rango/
   - add searching within a category page
      $ remove search link from menu bar by editting base.html in templates/rango
      $ edit category.html in templates/rango by adding the html code from search.html in the same directory
      $ update the search form action so that it refers to show category view url
      $ update the show category view to handle POST request from the search form by editting views.py in rango/
      $ edit category.html in templates/rango so that only logged in users can search
   - add a feature to allow users to create profile after registering
      $ create and edit profile_registration.html file in templates/rango/
      $ create a view called register_profile by editting views.py in rango/
      $ map the register_profile view to a url by editting urls.py in rango/
      $ edit urls.py in tango_with_django/ directory so as to redirect the success url in MyRegistrationView to the url mapping created above
   - add a feature to allow users to view and modify user info and profile
      $ create and edit profile.html in templates/rango that displays user profile and allows for edit of one's info
      $ add a new view called profile that handles displaying and updating profile by editting views.py in rango/
      $ add a url mapping for the profile view created above
      $ add a link in base.html in templates/rango to Profile view and thus template
   - add a feature to let users browse other user profiles
      $ create and edit list_profiles.html file in templates/rango to diaplay list of rango users
      $ create a new view called list_profiles to handle fetching of users list and sending to template
      $ add a url mapping for the list_profiles view mentioned above
      $ make sure only logged in users can view rango users profiles
      $ add a link in base.html navigation list to list_profile view and template

16) Chapter 16 - JQuery and Django
   - add a script tag for jquery in base.html in templates/rango 
      $ download and save jquery.min.js in static/jquery/ directory
      $ create and edit rango-jquery.js in static/jquery/
      $ add a script tag to reference the above js files from where they are stored locally
   -  try out a series of JQuery examples from the book to get familiar with it


17) Chapter 17 - AJAX in Django with JQuery
   - create rango-ajax.js file in static/jquery/ directory and include it into base.html in templates/rango
      $ use script tag to refer to rango-ajax.js file
   - Add a like functionality to category
      $ edit category.html in templates/rango to add a like button and dispaly the number of likes so far
      $ create a new view called like_category by editting views.py in rango/
         * this view gets the category id in request, increments the number of likes and returns the updates number of likes for that category
      $ add url mapping for the like_category view by editting urls.py in rango/
      $ edit rango-ajax.js file in static/jquery to add event functionality to the like button on category.html in templates/rango
         * on the click of the like buttton, the ajax makes request to url specified for like_category view
         * the like_category view in views.py (in rango/) will increment the number of likes and return the updated value
         * the rango-ajax.js will recieve the updated like value and replace the exisitng like value oncategory.html
         * also the rango-ajax file will hide the like button (but the button will reappear if the user reloads the page)
   - add Inline category suggestion feature to rango
      $ update the population script populate_rango.py by adding new categories (so as to give options for suggestions for user)
         *add categories like: Pascal, Perl, PHP, Prolog, PostScript Programming and JavaScript
      $ add a helper function called get_category_list by editting views.py in rango/
         * this functions returns a list of categories based on the input string provided
      $ create a new view called suggest_category by editting views.py in rango/
         * this view uses the get_category_list helper function
      $ add url mapping for suggest_category view by editting urls.py in rango/
      $ edit base.html in templates/rango so as to add search input field and a div to display suggestion
         * edit the side nav bar div
      $ edit rango-ajax.js to add an event when key is typed into the input field added by above step
         * when user types, the ajax file gets the typed string
         * then it sends it to suggest_category view via the mapped url
         * the suggest_category view returns list of category in html markup code
         * then the ajax function recieves the html response and updates the div tag placed to display results
   - add an Add button on the result of search so that users can add pages on the fly
      $ edit the search result part of category.html in templates/rango and add an Add button
      $ edit rango-ajax.js file to add click event to the button added in the above step
      $ create a view called auto_add_page by ediiting views.py
         * this view gets invoked by ajax function when button is clicked
         * it addes the chosen page and returns an updated list of pages for the current category
      $ create and edit page_list.html in templates/rango
         * this gets list of pages from auto_add_page view, gets rendered and returned to category.html in which it gets displayed
      $ add a url mapping for the auto_add_page view in urls.py


18) Chapter 18 - Automated Testing
   - run command to test rango
      $ python manage.py test rango
   - add a test case for Category by editting tests.py in rango/
      $ create a class to hold test methods for Category
      $ test if the Category model accepts negative views
      $ if test fails then update the Category model save method to handle the above issue
      $ add a test method to check if the slug creation method works
   - add test for index page views
      $ create a class for index view tests
      $ write a test function to check if index page displays "there are no categories" if there are no categories
      $ on the same function check if the response status code is 200 check if the context dictionary for category is empty
      $ create another test to check if the creation of Categories works
         * use a helper function to save categories
   - install coverage and run test
      $ pip install coverage
      $ coverage run --source='.' manage.py test rango      (run coverage test)
      $ coverage report                                     (view coverage report)
   - update model of Page to include first_visit and last_visit fields
      $ migrate your changes
      $ update add page functioanlity and goto page functionality to feed approporiate values to the new datetime fields of Page model
      $ add a test case in tests.py to check that both first and last visit values are not future values and that they don't overlap (meaning last vist should be greaster or equal to first visit)


19) Chapter 19 - Deploying your project
   - 